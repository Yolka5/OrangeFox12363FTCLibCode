package org.firstinspires.ftc.teamcode.opmode.testing.CalebrationAndTests;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

import org.firstinspires.ftc.teamcode.common.drive.opmodeOLD.MotorServoControl.PID;
import org.firstinspires.ftc.teamcode.common.drive.opmodeOLD.Controller.ControllerDetect;

@TeleOp
public class TelescopeOpenTest extends LinearOpMode {
    DcMotor telescope, ang;
    boolean starting = true, telescopeToggle, angToggle, XT;
    ControllerDetect gameP1, gameP2;
    org.firstinspires.ftc.teamcode.common.drive.opmodeOLD.MotorServoControl.PID telescopePID = new PID(0, 4, 0);
    PID angPID = new PID(0, 0.05, 0);
    double PID, feedF, target;
    //    ControllerDetect gameP2;
    public double getRealang(){
        return (-ang.getCurrentPosition()*0.172);
    }
    @Override

    public void runOpMode() throws InterruptedException {
        gameP1 = new ControllerDetect(gamepad1);
        gameP2 = new ControllerDetect(gamepad2);
        telescope = hardwareMap.get(DcMotor.class, "telescope");
        ang = hardwareMap.get(DcMotor.class, "ang");
//        telescope.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//        ang.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        telescope.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ang.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        telescope.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        ang.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
//        gameP2 = new ControllerDetect(gamepad2);
        waitForStart();
        while (opModeIsActive()){
            gameP1.update();
            gameP2.update();
//            double power = (Math.sin(getRealang())) * (getRealang()-target) * 0.01;

            if (gameP2.XOnce() && XT){
                target = 135;
                XT = !XT;
            } else if (gameP2.XOnce() && !XT) {
                target = 0;
                XT = !XT;
            }

            PID = (getRealang() - target) * ((double) 1 /180);
            feedF = (Math.sin(2*Math.toRadians(getRealang()))) * -0.7;
            // Convert power to radians
            telemetry.addData("encoder pose in radians", feedF);
//            ang.setPower(feedF + PID);
            telemetry.addData("power", 0.8 * feedF + PID * 0);
            ang.setPower(0.8*feedF + PID * 0);
            telemetry.addData("PID",   PID);
            telemetry.addData("feedF", feedF);
            telemetry.addData("realAng", getRealang());
            telemetry.addData("target", target);



            telemetry.update();



            if (gameP2.AOnce() && telescopeToggle){
                telescope.setPower(0.2);
                telescope.setTargetPosition(600);
                telescope.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                telescopeToggle = false;
            }else if (gameP2.AOnce() && !telescopeToggle){
                telescope.setPower(0.2);
                telescope.setTargetPosition(0);
                telescope.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                telescopeToggle = true;
            }
            if (gameP2.BOnce() && angToggle){
                ang.setPower(angPID.PIDController(800, ang.getCurrentPosition()));
                ang.setTargetPosition(800);
                ang.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                angToggle = false;
            }else if (gameP2.BOnce() && !angToggle){
                ang.setPower(angPID.PIDController(800, ang.getCurrentPosition()));
                ang.setTargetPosition(20);
                ang.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                angToggle = true;
            }

            if (gameP2.dpadUpOnce()){
                telescope.setTargetPosition(-600);
                telescope.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                telescope.setPower(0.1);
            }
            ang.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            ang.setPower(gameP2.left_stick_Y());
            telemetry.addData("ang pose", getRealang());

        }
//            if (starting) {
//                telescope.setTargetPosition(100);
//                telescope.setPower(1);
//                telescope.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//            }
//        }
    }
}